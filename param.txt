(async () => {
  const keyword = 'xxx.com';
  const seen = new Set();

  // 1) Ambil dari build manifest (Next.js style)
  try {
    if (window.__BUILD_MANIFEST) {
      try {
        const mvals = Object.values(window.__BUILD_MANIFEST);
        mvals.flat?.()?.forEach(p => p && seen.add(new URL(p, location.origin).href));
      } catch(e) { /* ignore */ }
    }
  } catch(e){}

  // 2) Ambil dari <script src=...>
  Array.from(document.scripts).forEach(s => s.src && seen.add(new URL(s.src, location.href).href));

  // 3) Ambil resource entries (performance)
  try {
    performance.getEntriesByType('resource').forEach(r => {
      if (r.name && r.name.endsWith('.js')) seen.add(r.name);
    });
  } catch(e){}

  // Final list
  const urls = Array.from(seen);
  console.log('Found script count:', urls.length);

  const results = [];
  const failed = [];

  // helper to print context lines
  const findWithContext = (text, kw, ctx=3) => {
    const lines = text.split(/\r?\n/);
    const out = [];
    lines.forEach((ln, idx) => {
      if (ln.includes(kw)) {
        const start = Math.max(0, idx-ctx);
        const end = Math.min(lines.length-1, idx+ctx);
        out.push({
          line: idx+1,
          snippet: lines.slice(start, end+1).join('\n')
        });
      }
    });
    return out;
  };

  for (const url of urls) {
    try {
      // try fetch normally (may fail due to CORS)
      const resp = await fetch(url, {cache: 'no-cache'});
      if (!resp.ok) {
        failed.push({url, reason: `HTTP ${resp.status}`});
        continue;
      }
      const text = await resp.text();
      if (text.includes(keyword)) {
        const hits = findWithContext(text, keyword, 3);
        results.push({url, hits});
        console.log('MATCH →', url, hits.map(h=>`line ${h.line}`).join(', '));
      }
    } catch (err) {
      // fetch failed (likely CORS). record and continue.
      failed.push({url, reason: err && err.message || String(err)});
    }
  }

  console.group('Search results summary');
  console.log('Matches:', results.length);
  results.forEach(r=>{
    console.groupCollapsed(r.url);
    r.hits.forEach(h=>{
      console.log(`line ${h.line}:\n${h.snippet}\n-----`);
    });
    console.groupEnd();
  });
  console.groupEnd();

  if (failed.length) {
    console.warn('Some files could not be fetched (CORS or network). Use DevTools Sources → Ctrl+Shift+F to search those files directly.');
    console.table(failed.slice(0,50));
  }

  return {results, failed};
})();
